1，let，const
块级作用域。
let a = 1;
if(true){
	let a = 2
};
a;      // 1
如果是es5，则会输出2；

没有变量提升，会直接报错；
for循环里面用let来设置i值，不会导致泄漏；

es5中严格模式下，这种是错的：
if(true){
	function f(){}
};
但是es6中允许；

function f(){ console.log(“a”) };
(function (){
     	if(false){
		function f(){ console.log(“b”) }
	}
	f();
},())

如果是es5，函数f被提升到了头部，则会输出b，等同于：
function f(){ console.log(“a”) };
(function (){
	function f(){ console.log(“b”) }

     	if(false){}

	f();
},())

但是如果是es6，则会输出a，等同于：
function f(){ console.log(“a”) };
(function (){
	f();
},())；


避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。
／/函数声明语句：
{
	let a = ‘secret’;
	function f(){
		return a;
	}
}
// 函数表达式:
{
	let a = ‘secret’;
	let f = function (){
		return a;
	}
}


const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。
const foo;    // error

const的作用域与let命令相同：只在声明所在的块级作用域内有效。

if(true){
	const max = 5;
	let min = 1;
};
max;  //error
min;  //error

const声明的常量，也与let一样不可重复声明。
























